# Testing the functionality of the "add_integer" function in the "0-add_integer" module

# Importing the "add_integer" function from the module
add_integer = __import__("0-add_integer").add_integer

# Checking if the module has a docstring
module_docstring = __import__("0-add_integer").__doc__
has_module_docstring = len(module_docstring) > 1

# Checking if the function has a docstring
function_docstring = __import__("0-add_integer").add_integer.__doc__
has_function_docstring = len(function_docstring) > 1

# Testing the addition of two positive integers
positive_addition = add_integer(2, 3)
assert positive_addition == 5

# Testing the addition of a positive and a negative integer
positive_negative_addition = add_integer(2, -4)
assert positive_negative_addition == -2

# Testing the addition of a negative and a positive integer
negative_positive_addition = add_integer(-6, 8)
assert negative_positive_addition == 2

# Testing the addition of multiple integers
multiple_addition = [add_integer(i, i ** 2) for i in range(6)]
assert multiple_addition == [0, 2, 6, 12, 20, 30]

# Testing the addition of a float and an integer
float_integer_addition = add_integer(2.1, 4)
assert float_integer_addition == 6

# Testing the addition of an integer and a float
integer_float_addition = add_integer(5, 7.8)
assert integer_float_addition == 12

# Testing the addition of two float numbers
float_addition = add_integer(2.45, 3.1)
assert float_addition == 5

# Testing for a ValueError when passing NaN as one of the arguments
try:
    nan_addition = add_integer(1, float('nan'))
except ValueError:
    pass
else:
    raise AssertionError('Expected ValueError not raised')

# Testing for an OverflowError when passing infinity as one of the arguments
try:
    inf_addition = add_integer(1, float('inf'))
except OverflowError:
    pass
else:
    raise AssertionError('Expected OverflowError not raised')

# Testing the addition of a very large integer
large_integer_addition = add_integer(999999999999999999999999999999, 1)
assert large_integer_addition == 1000000000000000000000000000000

# Testing for a TypeError when passing a non-integer with an integer
try:
    non_integer_addition = add_integer([1], 2)
except TypeError:
    pass
else:
    raise AssertionError('Expected TypeError not raised')

# Testing for a TypeError when passing an integer with a non-integer
try:
    integer_non_addition = add_integer(3, "2")
except TypeError:
    pass
else:
    raise AssertionError('Expected TypeError not raised')

# Testing for a TypeError when passing two non-integers
try:
    non_integer_non_addition = add_integer((2,), {"key": "value"})
except TypeError:
    pass
else:
    raise AssertionError('Expected TypeError not raised')

# Testing for a TypeError when passing a boolean with an integer
try:
    boolean_integer_addition = add_integer(True, 1)
except TypeError:
    pass
else:
    raise AssertionError('Expected TypeError not raised')

# Testing for a TypeError when passing an integer with a boolean
try:
    integer_boolean_addition = add_integer(0, False)
except TypeError:
    pass
else:
    raise AssertionError('Expected TypeError not raised')
    
Checking number with bool:
	 >>> add_integer(0, False)
         Traceback (most recent call last):
         ...
         TypeError: b must be an integer

Checking no args:
	 >>> add_integer()
	 Traceback (most recent call last):
	 ...
	 TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

Checking one arg:
	 >>> add_integer(1)
	 Traceback (most recent call last):
         ...
	 TypeError: add_integer() missing 1 required positional argument: 'b'

Checking more than 2 args:
	 >>> add_integer(1, 2, 3)
         Traceback (most recent call last):
         ...
         TypeError: add_integer() takes 2 positional arguments but 3 were given
	 
